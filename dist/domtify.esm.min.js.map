{"version":3,"file":"domtify.esm.min.js","sources":["../src/js/utils/index.js","../src/js/core.js","../src/js/ext/each.js","../src/js/ext/addClass.js","../src/js/ext/map.js","../src/js/ext/filter.js","../src/js/ext/eq.js","../src/js/ext/first.js","../src/js/ext/last.js","../src/js/ext/get.js","../src/js/ext/append.js","../src/js/ext/extend.js","../src/js/ext/clone.js","../src/js/ext/add.js"],"sourcesContent":["\r\n\r\nconst isElem = el => el instanceof Element;\r\n\r\n\r\n//用于判断一个对象是否是纯粹的 JavaScript 对象（即不是 DOM 对象、函数、数组等）。具体作用是检查对象是否通过对象字面量或 new Object() 创建，且其原型链上只包含标准的 Object 原型\r\nconst isPlainObject = (obj) => {\r\n    if (typeof obj !== 'object' || obj === null || obj instanceof Array) {\r\n        return false\r\n    }\r\n    const prototype = Object.getPrototypeOf(obj)\r\n    return prototype === Object.prototype || prototype === null\r\n}\r\n\r\n\r\nconst isString = (value) => {\r\n    return typeof value === 'string';\r\n}\r\n\r\n\r\nconst isHtmlString = (str) => {\r\n    return str.trim().startsWith('<')\r\n}\r\n\r\nconst isFunction = (value) => {\r\n    return typeof value === 'function';\r\n}\r\n\r\n\r\nconst isArray = (value) => {\r\n    return Array.isArray(value)\r\n}\r\n\r\nconst isInstance = (obj, cls) => {\r\n    return obj instanceof cls;\r\n}\r\n\r\n\r\nconst arrUnique = (arr) => [...new Set(arr)];\r\n\r\n\r\n\r\nconst isInPage = (node) => {\r\n    return (node === document.body) ? false : document.body.contains(node);\r\n};\r\n\r\n\r\n\r\nconst flatArgs = (args) => {\r\n\r\n    const uniqueMap = new Map();\r\n    return (Array.isArray(args) ? args : [args]).flat(Infinity).flatMap(item => {\r\n\r\n        if (item instanceof Domtify) {\r\n            return item.result\r\n        }\r\n        if (item instanceof NodeList || item instanceof HTMLCollection) {\r\n            return Array.from(item)\r\n        }\r\n        return item;\r\n    }).filter(item => {\r\n        if (item instanceof Element) {//不允许重复的Element\r\n            if (!uniqueMap.has(item)) {\r\n                uniqueMap.set(item, true);\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n        if (item === null || typeof item === 'number') {//null也删除\r\n            return false\r\n        }\r\n        return true;\r\n    });\r\n}\r\n\r\nexport {\r\n    flatArgs,\r\n    isInPage,\r\n    isArray,\r\n    arrUnique,\r\n    isInstance,\r\n    isFunction,\r\n    isString,\r\n    isHtmlString,\r\n    isElem,\r\n    isPlainObject\r\n}\r\n","import { isString, isHtmlString, isInstance } from \"./utils\";\r\n\r\n\r\n\r\n\r\nclass Domtify {\r\n\r\n    result = []\r\n\r\n    get length() {\r\n        return this.result.length\r\n    }\r\n\r\n    constructor(selector, context) {\r\n        // 如果已经是实例，无需处理直接返回\r\n        if (selector instanceof Domtify) {\r\n            return selector;\r\n        }\r\n        // 字符串处理\r\n        else if (isString(selector)) {\r\n\r\n            if (isHtmlString(selector)) {//html字符串就直接创建\r\n                const div = document.createElement('div');\r\n                div.insertAdjacentHTML('beforeend', selector)\r\n                this.result = [div.firstChild]\r\n            } else {//选择器字符串\r\n                this.result = Array.from((context || document).querySelectorAll(selector));\r\n            }\r\n        }\r\n        else if (isInstance(selector, NodeList) || isInstance(selector, HTMLCollection)) {//是直接传递的NodeList或者HTMLCollection集合\r\n            this.result = Array.from(selector)\r\n        }\r\n\r\n        else if (Array.isArray(selector)) {//是数组直接替换\r\n            this.result = selector\r\n        } else {\r\n            this.result = selector ? [selector] : []\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n//类的原型\r\nconst fn = Domtify.prototype\r\n\r\n\r\n\r\n//构造函数domtify\r\nconst domtify = (selector, context) => new Domtify(selector, context)\r\n\r\n\r\n//把类原型赋值给构造函数的原型，最后再赋值给构造函数domtify的fn属性，在js中，函数也是一种特殊的对象，因此也可以拥有属性。\r\ndomtify.fn = domtify.prototype = fn\r\n\r\n\r\nexport { domtify, domtify as d, fn, Domtify }\r\n","import { fn } from \"../core\";\r\n\r\n\r\nfn.each = function (callback) {\r\n    this.result.forEach(function (element, index, array) {\r\n        callback.call(element, element, index, array)\r\n    })\r\n    return this;\r\n}\r\n\r\n\r\n","import { fn } from \"../core\";\r\nimport { isArray, isFunction, isString, isElem } from \"../utils\";\r\n\r\nimport './each'\r\n\r\n\r\nfn.addClass = function (className) {\r\n\r\n\r\n    const list = (res) => isArray(res) ? res : isString(res) ? res.split(\" \") : [];\r\n\r\n    let classList = [];\r\n\r\n    return this.each((item, index) => {\r\n\r\n        // 处理函数返回值\r\n        if (isFunction(className)) {\r\n\r\n            classList = list(className.call(item, index, isElem(item) ? item.classList.value : item))\r\n\r\n        } else {\r\n            classList = list(className)\r\n        }\r\n\r\n        item?.classList?.add(...classList);\r\n    });\r\n}\r\n\r\n","import { fn } from \"../core\";\r\n\r\n\r\nfn.map = function (callback) {\r\n    this.result = this.result.map((element, index, array) => callback.call(element, element, index, array))\r\n    return this;\r\n}\r\n\r\n\r\n","import { fn, domtify } from \"../core\";\r\n\r\n\r\nfn.filter = function (selector) {\r\n\r\n    //默认是选择器\r\n    let callbackFn = item => item?.matches(selector || '*')\r\n\r\n    //函数\r\n    if (typeof selector === 'function') callbackFn = selector\r\n\r\n    //domtify实例\r\n    if (selector instanceof domtify) {\r\n        callbackFn = item => (selector.result).indexOf(item) !== -1;\r\n    }\r\n\r\n    //调用数组原生的filter过滤\r\n    this.result = this.result.filter((item, index, array) => callbackFn.call(item, item, index, array));\r\n\r\n    return this;\r\n\r\n\r\n}\r\n\r\n\r\n","import { fn } from \"../core\";\r\n\r\n\r\nfn.eq = function (index) {\r\n    this.result = [this.result.at(index)];\r\n    return this;\r\n}\r\n\r\n\r\n","import { fn } from \"../core\";\r\n\r\nimport \"./eq\"\r\n\r\nfn.first = function () {\r\n    return this.eq(0)\r\n}\r\n\r\n\r\n","import { fn } from \"../core\";\r\nimport \"./eq\"\r\n\r\nfn.last = function () {\r\n    return this.eq(-1)\r\n}\r\n\r\n\r\n","import { fn } from \"../core\";\r\n\r\n\r\nfn.get = function (index) {\r\n    return Number.isInteger(index) ? this.result.at(index) : this.result;\r\n}\r\n\r\n\r\n","import { fn, Domtify } from \"../core\";\r\nimport { isString, isHtmlString, isInstance, isFunction, isElem, isInPage, arrUnique,flatArgs } from \"../utils\";\r\n\r\nimport './each'\r\n\r\nfn.append = function (...args) {\r\n\r\n\r\n    //参数静态化\r\n    let firstParam = args[0];\r\n    let firstParamIsFunction = isFunction(firstParam)\r\n    let fnResult = {};\r\n    this.each((item, index) => {\r\n        if (firstParamIsFunction) {\r\n            fnResult[index] = flatArgs(firstParam.call(item, index, item.textContent))\r\n        }\r\n    })\r\n    Object.freeze(fnResult)//冻结该对象防止被更改\r\n\r\n\r\n\r\n\r\n\r\n    let collection = flatArgs(args);\r\n    let last = false;\r\n    return this.each((elem, index) => {\r\n\r\n        if (firstParamIsFunction) {\r\n            collection = fnResult[index]\r\n        }\r\n\r\n        last = index === this.length - 1 ? true : false;\r\n        collection.forEach(item => {\r\n            //1.字符串\r\n            if (isString(item)) {\r\n                if (isHtmlString(item)) {\r\n                    elem.insertAdjacentHTML('beforeend', item)\r\n                } else {\r\n                    elem.insertAdjacentText('beforeend', item)\r\n                }\r\n            } else if (isElem(item) || item instanceof Text) { //元素\r\n                if (last === true) {//最后一个目标元素\r\n                    elem.appendChild(item)\r\n                } else {\r\n                    elem.appendChild(item.cloneNode(true))\r\n                }\r\n            }\r\n\r\n        })\r\n\r\n    })\r\n\r\n\r\n\r\n}\r\n\r\n\r\n","import { domtify } from \"../core\";\r\n\r\nimport { isPlainObject } from \"../utils\";\r\n\r\n\r\ndomtify.extend = function () {\r\n    let options,\r\n        name,\r\n        src,\r\n        copy,\r\n        copyIsArray,\r\n        clone,\r\n        target = arguments[0] || {}, //第一个参数\r\n        i = 1,\r\n        length = arguments.length,\r\n        deep = false\r\n\r\n    // 处理深度复制情况\r\n    if (typeof target === 'boolean') {\r\n        deep = target\r\n\r\n        // 跳过布尔值和目标\r\n        target = arguments[i] || {}\r\n        i++\r\n    }\r\n\r\n    // 当目标是字符串或其他东西时处理大小写（可能在深度复制中）\r\n    if (typeof target !== 'object' && typeof target !== 'function') {\r\n        target = {}\r\n    }\r\n\r\n    // 如果只传递一个参数，则扩展jQuery本身\r\n    if (i === length) {\r\n        target = this\r\n        i--\r\n    }\r\n\r\n    for (; i < length; i++) {\r\n        // 仅处理非null/未定义的值\r\n        if ((options = arguments[i]) != null) {\r\n            // 延伸基础对象\r\n            for (name in options) {\r\n                copy = options[name]\r\n                // 防止Object.prototype污染\r\n                // 防止无休止的循环\r\n                if (name === '__proto__' || target === copy) {\r\n                    continue\r\n                }\r\n\r\n                // 如果我们正在合并普通对象或数组，则重复出现\r\n                if (\r\n                    deep &&\r\n                    copy &&\r\n                    (isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))\r\n                ) {\r\n                    src = target[name]\r\n\r\n                    // 确保源值的类型正确\r\n                    if (copyIsArray && !Array.isArray(src)) {\r\n                        clone = []\r\n                    } else if (!copyIsArray && !isPlainObject(src)) {\r\n                        clone = {}\r\n                    } else {\r\n                        clone = src\r\n                    }\r\n                    copyIsArray = false\r\n\r\n                    // 从不移动原始对象，而是克隆它们\r\n                    target[name] = this.extend(deep, clone, copy)\r\n\r\n                    // 不要引入未定义的值\r\n                    // } else if (copy !== undefined) {\r\n                } else {\r\n                    target[name] = copy\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // 返回修改后的对象\r\n    return target\r\n}\r\n\r\n","import { fn } from \"../core\";\r\nimport './each'\r\n\r\n\r\nfn.clone = function (deep = false) {\r\n    return this.map(item => item?.cloneNode(deep))\r\n}\r\n\r\n","import { fn, domtify } from \"../core\";\r\nimport { arrUnique } from \"../utils\";\r\nimport './each'\r\nimport './get'\r\n\r\n\r\nfn.add = function (selector, context) {\r\n    return domtify(arrUnique([...this.get(), ...domtify(selector, context).get()]))\r\n}\r\n\r\n"],"names":["isElem","el","Element","isPlainObject","obj","Array","prototype","Object","getPrototypeOf","isString","value","isHtmlString","str","trim","startsWith","isFunction","isInstance","cls","flatArgs","args","uniqueMap","Map","isArray","flat","Infinity","flatMap","item","Domtify","result","NodeList","HTMLCollection","from","filter","has","set","Domtify$1","length","this","constructor","selector","context","div","document","createElement","insertAdjacentHTML","firstChild","querySelectorAll","fn","domtify","each","callback","forEach","element","index","array","call","addClass","className","list","res","split","classList","_item$classList","add","map","callbackFn","matches","indexOf","eq","at","first","last","get","Number","isInteger","append","firstParam","firstParamIsFunction","fnResult","textContent","freeze","collection","elem","insertAdjacentText","Text","appendChild","cloneNode","extend","options","name","src","copy","copyIsArray","clone","target","arguments","i","deep","arr","Set"],"mappings":"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"}